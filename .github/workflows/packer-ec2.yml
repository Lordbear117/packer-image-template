name: Build and Deploy EC2 Instance with Packer and GitHub Actions

on:
  push:
    branches:
      - naim

jobs:
  build-ami:
    runs-on: ubuntu-latest
    environment: aws

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Packer
        uses: hashicorp/setup-packer@v2
        with:
          version: latest

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Init Packer
        run: packer init template_automatic.pkr.hcl

      - name: Build AMI with Packer
        run: packer build template_automatic.pkr.hcl

  deploy-ec2:
    needs: build-ami
    runs-on: ubuntu-latest
    environment: aws

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install jq
        run: sudo apt-get install jq -y

      - name: Check and Terminate Existing EC2 Instance
        run: |
          INSTANCE_NAME="Packer Instance-$(date +%Y%m%d)"
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=$INSTANCE_NAME" --query "Reservations[0].Instances[0].InstanceId" --output text)

          if [ "$INSTANCE_ID" != "None" ]; then
            echo "La instancia con el nombre '$INSTANCE_NAME' ya existe, deteniendo y eliminando..."
            # Detener y eliminar la instancia existente
            aws ec2 terminate-instances --instance-ids $INSTANCE_ID
            aws ec2 wait instance-terminated --instance-ids $INSTANCE_ID
            echo "Instancia terminada y eliminada."
          else
            echo "No se encontró una instancia existente con el nombre '$INSTANCE_NAME'. Lanzando una nueva..."
          fi

      - name: Launch EC2 Instance
        run: |
          AMI_ID=$(aws ec2 describe-images --filters "Name=name,Values=packer-node-nginx-*" --query "Images | sort_by(@, &CreationDate)[-1].ImageId" --output text)
          DEFAULT_SUBNET=$(aws ec2 describe-subnets --filters "Name=default-for-az,Values=true" --query "Subnets[0].SubnetId" --output text)

          INSTANCE_NAME="Packer Instance-$(date +%Y%m%d)"  # Nombre único para la nueva instancia

          # Lanzar la nueva instancia EC2 con el nombre único
          INSTANCE_DETAILS=$(aws ec2 run-instances --image-id $AMI_ID --instance-type t2.micro --key-name ${{ secrets.EC2KEY }} --security-group-ids ${{ secrets.SG_PACKER }} --subnet-id $DEFAULT_SUBNET --region us-east-1 --associate-public-ip-address --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$INSTANCE_NAME}]" --output json)

          # Obtener el ID de la instancia
          INSTANCE_ID=$(echo $INSTANCE_DETAILS | jq -r '.Instances[0].InstanceId')
          echo "La instancia EC2 ha sido lanzada con ID: $INSTANCE_ID"

          # Esperar a que la instancia esté en estado 'running'
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID
          echo "La instancia está en estado 'running'."

          # Obtener la IP pública de la instancia
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text)

          echo "La IP pública de la instancia es: $PUBLIC_IP"
